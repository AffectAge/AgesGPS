/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –¥–ª—è –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π
 * –∏ –∑–∞–ø–∏—Å—å –≤ "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ" —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º "–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏"
 */
function generateEligibleProvinces(data, buildings) {
  const messages = [];

  try {
    const stateData = extractVariableData(data, '–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞', messages);
    if (!stateData?.state_id) {
      messages.push('[–û—à–∏–±–∫–∞] ‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞');
      return messages;
    }

    const stateName = stateData.state_id;

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ (–ù–û–í–û–ï!)
    const technologiesData = extractVariableData(data, '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞', messages);
    const stateTechnologies = technologiesData?.technologies || [];
    messages.push(`[–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞] üî¨ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${stateTechnologies.length} —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π.`);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
    const provincesMap = {};
    const provinceRows = Array.isArray(data['–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏']) ? data['–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏'] : [];

    provinceRows.forEach((row, index) => {
      if (!row || !row[0] || typeof row[0] !== 'string' || row[0].trim() === '') return;

      const parsed = safeParseJSON(row[0], '–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏', index, messages);
      if (!parsed || typeof parsed !== 'object') return;

      if (parsed.id) {
        provincesMap[parsed.id] = parsed;
      } else {
        Object.entries(parsed).forEach(([key, val]) => {
          if (val?.id) {
            provincesMap[val.id] = val;
          }
        });
      }
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–∫
    const existingBuildings = {};
    const buildingRows = Array.isArray(data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏']) ? data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏'] : [];

    buildingRows.forEach((row, index) => {
      if (!row || !row[0] || typeof row[0] !== 'string' || row[0].trim() === '') return;

      const parsed = safeParseJSON(row[0], '–ü–æ—Å—Ç—Ä–æ–π–∫–∏', index, messages);
      if (!parsed) return;

      const arr = Array.isArray(parsed) ? parsed : [parsed];
      arr.forEach(building => {
        if (!building.province_id || !building.building_id) return;
        existingBuildings[building.province_id] = existingBuildings[building.province_id] || {};
        existingBuildings[building.province_id][building.building_id] =
          (existingBuildings[building.province_id][building.building_id] || 0) + 1;
      });
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ (–û–ë–ù–û–í–õ–ï–ù–û!)
    const context = {
      provincesMap,
      existingBuildings,
      stateName,
      stateTechnologies, // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      messages
    };

    const result = {};
    let totalSuitableCount = 0;

    buildings.forEach(building => {
      const suitable = [];

      Object.values(provincesMap).forEach(province => {
        if (!province?.state_id || province.state_id !== stateName) return;

        const check = evaluateBuildingRequirements(
          building.requirements || building.criteria,
          province,
          context,
          building.name,
          0
        );

        if (check.meets) {
          suitable.push(province.id);
        }
      });

      result[building.id] = suitable;
      totalSuitableCount += suitable.length;
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º –∑–¥–∞–Ω–∏–∏ (–ù–û–í–û–ï!)
      if (suitable.length === 0) {
        messages.push(`[–ê–Ω–∞–ª–∏–∑] ‚ùå "${building.name}": –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      } else {
        messages.push(`[–ê–Ω–∞–ª–∏–∑] ‚úÖ "${building.name}": ${suitable.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π`);
      }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    if (!Array.isArray(data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'])) {
      data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'] = [];
    }

    const id = '–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏';
    const jsonStr = JSON.stringify(result);
    const rowIndex = data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'].findIndex(row => row[0] === id);

    if (rowIndex !== -1) {
      data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'][rowIndex][1] = jsonStr;
    } else {
      data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'].push([id, jsonStr]);
    }

    messages.push(`[‚úÖ] –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –¥–ª—è ${buildings.length} –∑–¥–∞–Ω–∏–π. –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${totalSuitableCount} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π.`);

  } catch (error) {
    messages.push(`[–û—à–∏–±–∫–∞] ‚ö†Ô∏è generateEligibleProvinces: ${error.message}`);
  }

  return messages;
}
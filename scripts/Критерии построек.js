/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫
 */
function safeParseJSON(str, context, rowIndex, messages) {
  try {
    return JSON.parse(str);
  } catch (e) {
    messages.push(`[–û—à–∏–±–∫–∞] üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON (${context}, —Å—Ç—Ä–æ–∫–∞ ${rowIndex + 1}): ${e.message}`);
    return null;
  }
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"
 */
function extractVariableData(data, identifier, messages) {
  const targetRow = data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ']?.find(row => row[0] === identifier);
  if (!targetRow?.[1]) {
    messages.push(`[–û—à–∏–±–∫–∞] üîç –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä "${identifier}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.`);
    return null;
  }

  const jsonMatch = targetRow[1].match(/\{.*\}/);
  if (!jsonMatch) {
    messages.push(`[–û—à–∏–±–∫–∞] üìù –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Å—Ç—Ä–æ–∫–∏ "${identifier}" –≤ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.`);
    return null;
  }

  return safeParseJSON(jsonMatch[0], `–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:${identifier}`, 0, messages);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ø–æ –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "climate.temperature" –∏–ª–∏ "resources.iron")
 */
function getValueByPath(obj, path) {
  return path.split('.').reduce((current, key) => current?.[key], obj);
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
 */
function processConstructionQueue(data, buildings) {
  const messages = [];

  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const stateData = extractVariableData(data, '–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞', messages);
    if (!stateData) return messages;

    const stateName = stateData.state_id;
    if (!stateName) {
      messages.push(`[–û—à–∏–±–∫–∞] üèõÔ∏è –ö–ª—é—á "state_id" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞.`);
      return messages;
    }

    const queueData = extractVariableData(data, '–û—á–µ—Ä–µ–¥—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞', messages);
    if (!queueData?.construction_queue || !Array.isArray(queueData.construction_queue)) {
      messages.push(`[–û—à–∏–±–∫–∞] üèóÔ∏è –û—á–µ—Ä–µ–¥—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º.`);
      return messages;
    }

    const constructionQueue = queueData.construction_queue;
    messages.push(`[–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ] üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏: ${constructionQueue.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤.`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
    const provincesMap = {};
    let validProvinces = 0;
    
    (data['–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏'] || []).forEach((row, index) => {
      if (!row[0]) return;
      
      const provinceData = safeParseJSON(row[0], '–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏', index, messages);
      if (!provinceData || typeof provinceData !== 'object') return;

      if (provinceData.id) {
        provincesMap[provinceData.id] = provinceData;
        validProvinces++;
      } else {
        // –§–æ—Ä–º–∞—Ç {"province_001": {...}}
        Object.entries(provinceData).forEach(([key, value]) => {
          if (value?.id) {
            provincesMap[value.id] = value;
            validProvinces++;
          }
        });
      }
    });

    messages.push(`[–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ] üó∫Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${validProvinces} –ø—Ä–æ–≤–∏–Ω—Ü–∏–π.`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–¥–∞–Ω–∏–π
    const existingBuildings = {};
    let totalBuildings = 0;

    (data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏'] || []).forEach((row, index) => {
      if (!row[0]) return;
      
      const buildingData = safeParseJSON(row[0], '–ü–æ—Å—Ç—Ä–æ–π–∫–∏', index, messages);
      if (!buildingData) return;

      const buildingsArray = Array.isArray(buildingData) ? buildingData : [buildingData];
      buildingsArray.forEach(building => {
        if (!building.province_id || !building.building_id) return;
        
        existingBuildings[building.province_id] = existingBuildings[building.province_id] || {};
        existingBuildings[building.province_id][building.building_id] = 
          (existingBuildings[building.province_id][building.building_id] || 0) + 1;
        totalBuildings++;
      });
    });

    messages.push(`[GNN] üè¢ –£—á—Ç–µ–Ω–æ ${totalBuildings} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–¥–∞–Ω–∏–π.`);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    const evaluationContext = {
      provincesMap,
      existingBuildings,
      stateName,
      messages
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
    const updatedQueue = [];
    let processedCount = 0, promotedCount = 0, removedCount = 0;
    
    constructionQueue.forEach((queueItem, index) => {
      if (queueItem.status !== '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞' && queueItem.status !== '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ') {
        updatedQueue.push(queueItem);
        return;
      }

      processedCount++;
      const buildingCriteria = buildings.find(b => b.id === queueItem.building_id);
      
      if (!buildingCriteria) {
        messages.push(`[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] ‚ö†Ô∏è –ó–¥–∞–Ω–∏–µ "${queueItem.building_id}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—Ä–∏—Ç–µ—Ä–∏—è—Ö. –£–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.`);
        removedCount++;
        return;
      }

      const province = provincesMap[queueItem.province_id];
      if (!province) {
        messages.push(`<cellbg:#FFEEEE> [–û—à–∏–±–∫–∞] <color:#CC0000> üó∫Ô∏è –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${queueItem.province_id}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ </color> –¥–ª—è –∑–¥–∞–Ω–∏—è <i>"${buildingCriteria.name}"</i>. <color:#009900> –£–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.</color>`);
        removedCount++;
        return;
      }

      if (province.state_id !== stateName) {
        messages.push(`[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] üèõÔ∏è –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${province.name}" –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É "${stateName}". –£–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.`);
        removedCount++;
        return;
      }

      const requirementResult = evaluateBuildingRequirements(
        buildingCriteria.requirements || buildingCriteria.criteria, // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        province, 
        evaluationContext,
        buildingCriteria.name, 
        queueItem.queue_position || index + 1
      );

      if (requirementResult.meets) {
        if (queueItem.status === '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞') {
          queueItem.status = '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ';
          messages.push(`[–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ] üèóÔ∏è "${buildingCriteria.name}" –≤ "${province.name}" –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Å—Ç–∞—Ç—É—Å "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ".`);
          promotedCount++;
        }
        updatedQueue.push(queueItem);
      } else {
        messages.push(`[–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ] ‚ùå "${buildingCriteria.name}" –≤ "${province.name}" –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ —É–¥–∞–ª–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: ${requirementResult.reason}`);
        removedCount++;
      }
    });

    messages.push(`[–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ] üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount}, –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ ${promotedCount}, —É–¥–∞–ª–µ–Ω–æ ${removedCount}.`);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const updatedQueueData = { construction_queue: updatedQueue };
    
    if (!Array.isArray(data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'])) {
      data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'] = [];
      messages.push(`[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] ‚ö†Ô∏è "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ" –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤.`);
    }

    const queueRowIndex = data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'].findIndex(row => row[0] === '–û—á–µ—Ä–µ–¥—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞');
    
    if (queueRowIndex !== -1) {
      data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'][queueRowIndex][1] = JSON.stringify(updatedQueueData);
      messages.push(`[–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ] üíæ –û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${updatedQueue.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤.`);
    } else {
      data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'].push(['–û—á–µ—Ä–µ–¥—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞', JSON.stringify(updatedQueueData)]);
      messages.push(`[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] ‚ÑπÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ "–û—á–µ—Ä–µ–¥—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞" –≤ "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ".`);
    }

  } catch (error) {
    messages.push(`[–û—à–∏–±–∫–∞] üö® processConstructionQueue: ${error.message}`);
  }

  return messages;
}

/**
 * –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
 */
const CriteriaProcessor = {
  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
   */
  processors: new Map(),

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è
   */
  addProcessor(name, processor) {
    this.processors.set(name, processor);
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
   */
  getProcessor(name) {
    return this.processors.get(name);
  },

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
   */
  init() {
    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
    this.addProcessor('province_property', (criterion, province, context) => {
      const value = getValueByPath(province, criterion.path);
      return this.evaluateCondition(value, criterion, `province.${criterion.path}`);
    });

    this.addProcessor('province_buildings', (criterion, province, context) => {
      const provinceBuildings = context.existingBuildings[province.id] || {};
      return this.evaluateBuildingCriteria(criterion, provinceBuildings);
    });

    this.addProcessor('province_resources', (criterion, province, context) => {
      const resources = province.resources || {};
      return this.evaluateResourceCriteria(criterion, resources);
    });

    this.addProcessor('state_buildings', (criterion, province, context) => {
      const stateBuildingCounts = {};
      Object.values(context.provincesMap).forEach(p => {
        if (p.state_id === context.stateName) {
          const pBuildings = context.existingBuildings[p.id] || {};
          Object.entries(pBuildings).forEach(([buildingId, count]) => {
            stateBuildingCounts[buildingId] = (stateBuildingCounts[buildingId] || 0) + count;
          });
        }
      });
      return this.evaluateBuildingCriteria(criterion, stateBuildingCounts);
    });

    this.addProcessor('world_buildings', (criterion, province, context) => {
      const worldBuildingCounts = {};
      Object.values(context.provincesMap).forEach(p => {
        const pBuildings = context.existingBuildings[p.id] || {};
        Object.entries(pBuildings).forEach(([buildingId, count]) => {
          worldBuildingCounts[buildingId] = (worldBuildingCounts[buildingId] || 0) + count;
        });
      });
      return this.evaluateBuildingCriteria(criterion, worldBuildingCounts);
    });

    this.addProcessor('planet_property', (criterion, province, context) => {
      const value = getValueByPath(province, criterion.path);
      return this.evaluateCondition(value, criterion, `planet.${criterion.path}`);
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    this.addProcessor('climate', (criterion, province, context) => {
      const value = getValueByPath(province, 'climate');
      return this.evaluateCondition(value, criterion, 'climate');
    });

    this.addProcessor('terrain', (criterion, province, context) => {
      const value = getValueByPath(province, 'terrain');
      return this.evaluateCondition(value, criterion, 'terrain');
    });

    this.addProcessor('population', (criterion, province, context) => {
      const value = getValueByPath(province, 'population');
      return this.evaluateCondition(value, criterion, 'population');
    });

    this.addProcessor('custom_formula', (criterion, province, context) => {
      // –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª
      try {
        const formula = criterion.formula;
        // –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä —Ñ–æ—Ä–º—É–ª (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        const result = this.evaluateFormula(formula, province, context);
        return this.evaluateCondition(result, criterion, 'custom_formula');
      } catch (error) {
        return { meets: false, reason: `–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º—É–ª–µ: ${error.message}` };
      }
    });
  },

  /**
   * –û—Ü–µ–Ω–∫–∞ —Ñ–æ—Ä–º—É–ª—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  evaluateFormula(formula, province, context) {
    // –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º—É–ª–µ
    let processedFormula = formula
      .replace(/province\.(\w+)/g, (match, prop) => getValueByPath(province, prop) || 0)
      .replace(/population/g, province.population || 0)
      .replace(/climate/g, `"${province.climate || 'unknown'}"`)
      .replace(/terrain/g, `"${province.terrain || 'unknown'}"`);

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
    if (/^[\d+\-*\/\s().]+$/.test(processedFormula)) {
      return eval(processedFormula);
    }
    
    throw new Error('–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞');
  },

  /**
   * –û—Ü–µ–Ω–∫–∞ –∑–¥–∞–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏
   */
  evaluateBuildingCriteria(criterion, buildingCounts) {
    const conditions = criterion.conditions || [];
    const logic = criterion.logic || 'AND';
    
    const results = conditions.map((condition, index) => {
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö sub_conditions
      if (condition.sub_conditions) {
        return this.evaluateSubConditions(condition, buildingCounts, 'building');
      }
      
      // –û–±—ã—á–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –∑–¥–∞–Ω–∏—è
      if (condition.building_id) {
        const count = buildingCounts[condition.building_id] || 0;
        return this.evaluateCondition(count, condition, `building.${condition.building_id}`);
      }
      
      return { meets: false, reason: `–£—Å–ª–æ–≤–∏–µ ${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç building_id` };
    });

    return this.combineResults(results, logic, '–∑–¥–∞–Ω–∏—è');
  },

  /**
   * –û—Ü–µ–Ω–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏
   */
  evaluateResourceCriteria(criterion, resources) {
    const conditions = criterion.conditions || [];
    const logic = criterion.logic || 'AND';
    
    const results = conditions.map((condition, index) => {
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö sub_conditions
      if (condition.sub_conditions) {
        return this.evaluateSubConditions(condition, resources, 'resource');
      }
      
      // –û–±—ã—á–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ —Ä–µ—Å—É—Ä—Å–∞
      if (condition.resource_id) {
        const amount = resources[condition.resource_id] || 0;
        return this.evaluateCondition(amount, condition, `resource.${condition.resource_id}`);
      }
      
      return { meets: false, reason: `–£—Å–ª–æ–≤–∏–µ ${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç resource_id` };
    });

    return this.combineResults(results, logic, '—Ä–µ—Å—É—Ä—Å—ã');
  },

  /**
   * –û—Ü–µ–Ω–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö sub_conditions
   */
  evaluateSubConditions(condition, dataMap, prefix) {
    const subConditions = condition.sub_conditions || [];
    const subLogic = condition.logic || 'AND';
    
    const subResults = subConditions.map((subCondition, subIndex) => {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
      if (subCondition.sub_conditions) {
        return this.evaluateSubConditions(subCondition, dataMap, prefix);
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      if (prefix === 'building' && subCondition.building_id) {
        const count = dataMap[subCondition.building_id] || 0;
        return this.evaluateCondition(count, subCondition, `${prefix}.${subCondition.building_id}`);
      } else if (prefix === 'resource' && subCondition.resource_id) {
        const amount = dataMap[subCondition.resource_id] || 0;
        return this.evaluateCondition(amount, subCondition, `${prefix}.${subCondition.resource_id}`);
      } else if (prefix === 'magic' && subCondition.magic_type) {
        const amount = dataMap[subCondition.magic_type] || 0;
        return this.evaluateCondition(amount, subCondition, `${prefix}.${subCondition.magic_type}`);
      }
      
      return { meets: false, reason: `–ü–æ–¥—É—Å–ª–æ–≤–∏–µ ${subIndex + 1}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–∏–ø–∞ ${prefix}` };
    });

    return this.combineResults(subResults, subLogic, `–ø–æ–¥—É—Å–ª–æ–≤–∏—è (${prefix})`);
  },

  /**
   * –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —É—Å–ª–æ–≤–∏—è
   */
  evaluateCondition(actualValue, condition, target) {
    const { operator, value: expectedValue } = condition;

    if (actualValue === undefined || actualValue === null) {
      return { meets: false, reason: `–ó–Ω–∞—á–µ–Ω–∏–µ "${target}" –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ` };
    }

    const operators = {
      '>=': () => actualValue >= expectedValue,
      '<=': () => actualValue <= expectedValue,
      '>': () => actualValue > expectedValue,
      '<': () => actualValue < expectedValue,
      '==': () => actualValue === expectedValue,
      'equals': () => actualValue === expectedValue,
      '!=': () => actualValue !== expectedValue,
      'not_equals': () => actualValue !== expectedValue,
      'in': () => Array.isArray(expectedValue) && expectedValue.includes(actualValue),
      'contains': () => Array.isArray(expectedValue) && expectedValue.includes(actualValue),
      'not_in': () => Array.isArray(expectedValue) && !expectedValue.includes(actualValue),
      'not_contains': () => Array.isArray(expectedValue) && !expectedValue.includes(actualValue),
      'starts_with': () => typeof actualValue === 'string' && typeof expectedValue === 'string' && actualValue.startsWith(expectedValue),
      'ends_with': () => typeof actualValue === 'string' && typeof expectedValue === 'string' && actualValue.endsWith(expectedValue),
      'regex': () => {
        try {
          return new RegExp(expectedValue).test(String(actualValue));
        } catch (e) {
          throw new Error(`–æ—à–∏–±–∫–∞ –≤ regex "${expectedValue}": ${e.message}`);
        }
      },
      'matches': () => operators.regex(),
      'between': () => Array.isArray(expectedValue) && expectedValue.length === 2 && actualValue >= expectedValue[0] && actualValue <= expectedValue[1],
      'divisible_by': () => typeof actualValue === 'number' && typeof expectedValue === 'number' && expectedValue !== 0 && actualValue % expectedValue === 0,
      'is_empty': () => {
        const isEmpty = actualValue === '' || actualValue === null || actualValue === undefined || 
                       (Array.isArray(actualValue) && actualValue.length === 0) ||
                       (typeof actualValue === 'object' && Object.keys(actualValue).length === 0);
        return expectedValue ? isEmpty : !isEmpty;
      }
    };

    try {
      const meets = operators[operator] ? operators[operator]() : false;
      
      if (!operators[operator]) {
        return { meets: false, reason: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä "${operator}"` };
      }

      const reason = `${target} (${actualValue}) ${operator} ${Array.isArray(expectedValue) ? `[${expectedValue.join(', ')}]` : expectedValue} ${meets ? '‚úÖ' : '‚ùå'}`;

      return { meets, reason };
    } catch (error) {
      return { meets: false, reason: error.message };
    }
  },

  /**
   * –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –ª–æ–≥–∏–∫–µ
   */
  combineResults(results, logic, type) {
    const logicMap = {
      'AND': () => results.every(r => r.meets),
      'OR': () => results.some(r => r.meets),
      'NOT': () => !results.some(r => r.meets),
      'XOR': () => results.filter(r => r.meets).length === 1,
      'NAND': () => !results.every(r => r.meets),
      'NOR': () => !results.some(r => r.meets)
    };

    const meets = logicMap[logic] ? logicMap[logic]() : false;
    let reason = '';

    if (!meets) {
      const failedReasons = results.filter(r => !r.meets).map(r => r.reason);
      reason = logic === 'OR' ? 
        `–ù–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (OR): ${results.map(r => r.reason).join(', ')}` :
        `–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ª–æ–≤–∏—è ${type} (${logic}): ${failedReasons.join(', ')}`;
    } else {
      reason = `${type} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (${logic})`;
    }

    return { meets, reason };
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
CriteriaProcessor.init();

/**
 * –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∑–¥–∞–Ω–∏—è —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
 */
function evaluateBuildingRequirements(requirements, province, context, buildingName, queuePosition) {
  if (!requirements || typeof requirements !== 'object') {
    return { meets: true, reason: '–ù–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π' };
  }

  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
  if (requirements.conditions) {
    return evaluateLegacyRequirements(requirements, province, context);
  }

  // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
  const { logic = 'AND', criteria = [] } = requirements;
  if (!criteria.length) return { meets: true, reason: '–ù–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤' };

  const results = criteria.map((criterion, index) => {
    const processor = CriteriaProcessor.getProcessor(criterion.type);
    
    if (!processor) {
      return { 
        meets: false, 
        reason: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫—Ä–∏—Ç–µ—Ä–∏—è: "${criterion.type}"` 
      };
    }

    try {
      return processor(criterion, province, context);
    } catch (error) {
      return { 
        meets: false, 
        reason: `–û—à–∏–±–∫–∞ –≤ –∫—Ä–∏—Ç–µ—Ä–∏–∏ ${criterion.type}: ${error.message}` 
      };
    }
  });

  return CriteriaProcessor.combineResults(results, logic, '–∫—Ä–∏—Ç–µ—Ä–∏–∏');
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
function evaluateLegacyRequirements(requirements, province, context) {
  const { logic = 'AND', conditions = [] } = requirements;
  if (!conditions.length) return { meets: true, reason: '–ü—É—Å—Ç—ã–µ —É—Å–ª–æ–≤–∏—è' };

  const results = conditions.map((condition, index) => 
    evaluateLegacyCondition(condition, province, context, index)
  );

  return CriteriaProcessor.combineResults(results, logic, '—É—Å–ª–æ–≤–∏—è');
}

/**
 * –û—Ü–µ–Ω–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —É—Å–ª–æ–≤–∏–π
 */
function evaluateLegacyCondition(condition, province, context, conditionIndex) {
  if (!condition.target) {
    return { meets: false, reason: `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç target` };
  }

  const [targetType, ...targetPath] = condition.target.split('.');
  
  try {
    const evaluators = {
      'province': () => {
        const property = targetPath[0];
        if (property === 'buildings') {
          return CriteriaProcessor.evaluateBuildingCriteria(condition, context.existingBuildings[province.id] || {});
        }
        if (property === 'resources') {
          return CriteriaProcessor.evaluateResourceCriteria(condition, province.resources || {});
        }
        const value = province[property];
        if (value === undefined) {
          return { meets: false, reason: `–°–≤–æ–π—Å—Ç–≤–æ "${property}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏` };
        }
        return CriteriaProcessor.evaluateCondition(value, condition, `province.${property}`);
      },
      'state': () => {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è state –ª–æ–≥–∏–∫–∏...
        return { meets: true, reason: 'State —É—Å–ª–æ–≤–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ legacy —Ä–µ–∂–∏–º–µ' };
      },
      'planet': () => {
        const value = getValueByPath(province, targetPath.join('.'));
        return CriteriaProcessor.evaluateCondition(value, condition, `planet.${targetPath.join('.')}`);
      },
      'world': () => {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è world –ª–æ–≥–∏–∫–∏...
        return { meets: true, reason: 'World —É—Å–ª–æ–≤–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ legacy —Ä–µ–∂–∏–º–µ' };
      }
    };

    return evaluators[targetType] ? evaluators[targetType]() : 
      { meets: false, reason: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π target "${targetType}"` };
  } catch (error) {
    return { meets: false, reason: `–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: ${error.message}` };
  }
}
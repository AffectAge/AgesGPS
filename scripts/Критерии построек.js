

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * @param {string} str - –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
 * @param {string} contextLabel - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {number} rowIndex - –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏
 * @param {Array} messages - –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
 * @returns {Object|null} - –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
function safeParseJSON(str, contextLabel, rowIndex, messages) {
  try {
    return JSON.parse(str);
  } catch (e) {
    messages.push(`[–û—à–∏–±–∫–∞] üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON (${contextLabel}, —Å—Ç—Ä–æ–∫–∞ ${rowIndex + 1}): ${e.message}`);
    return null;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –∏–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
 * @param {string} identifier - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @param {Array} messages - –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @returns {Object|null} - –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
function extractVariableData(data, identifier, messages) {
  const targetRow = data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ']?.find(row => row[0] === identifier);
  if (!targetRow || !targetRow[1]) {
    messages.push(`[–û—à–∏–±–∫–∞] üîç –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä "${identifier}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.`);
    return null;
  }

  const jsonMatch = targetRow[1].match(/\{.*\}/);
  if (!jsonMatch) {
    messages.push(`[–û—à–∏–±–∫–∞] üìù –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Å—Ç—Ä–æ–∫–∏ "${identifier}" –≤ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.`);
    return null;
  }

  const parsedData = safeParseJSON(jsonMatch[0], `–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:${identifier}`, 0, messages);
  return parsedData;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
 * @param {Object} data - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
 * @param {Array} buildings - –ú–∞—Å—Å–∏–≤ —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –∑–¥–∞–Ω–∏–π
 * @returns {Array} messages - –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ —Å–æ–±—ã—Ç–∏–π
 */
function processConstructionQueue(data, buildings) {
  let messages = [];

  try {
    // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ
    const stateData = extractVariableData(data, '–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞', messages);
    if (!stateData) return messages;

    const stateName = stateData.state_id;
    if (!stateName) {
      messages.push(`[–û—à–∏–±–∫–∞] üèõÔ∏è –ö–ª—é—á "state_id" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞.`);
      return messages;
    }

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
    const queueData = extractVariableData(data, '–û—á–µ—Ä–µ–¥—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞', messages);
    if (!queueData) return messages;

    if (!queueData.construction_queue || !Array.isArray(queueData.construction_queue)) {
      messages.push(`[–û—à–∏–±–∫–∞] üèóÔ∏è –ö–ª—é—á "construction_queue" –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –≤ –¥–∞–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–∏.`);
      return messages;
    }

    const constructionQueue = queueData.construction_queue;
    messages.push(`[–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ] üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞: –Ω–∞–π–¥–µ–Ω–æ ${constructionQueue.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤.`);

    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è—Ö
    const provincesData = data['–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏'];
    if (!provincesData || provincesData.length === 0) {
      messages.push(`[–û—à–∏–±–∫–∞] üó∫Ô∏è –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö.`);
      return messages;
    }

    const provincesMap = {};
    let validProvinces = 0;
    provincesData.forEach((row, index) => {
      const cell = row[0];
      if (cell) {
        const provinceData = safeParseJSON(cell, '–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏', index, messages);
        if (provinceData && typeof provinceData === 'object') {
          // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
          if (provinceData.id) {
            provincesMap[provinceData.id] = provinceData;
            validProvinces++;
          } else {
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {"province_001": {...}}
            const keys = Object.keys(provinceData);
            keys.forEach(key => {
              if (provinceData[key] && provinceData[key].id) {
                provincesMap[provinceData[key].id] = provinceData[key];
                validProvinces++;
              }
            });
          }
        }
      }
    });
    messages.push(`[–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ] üó∫Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${validProvinces} –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`);

    // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç—Ä–æ–π–∫–∞—Ö
    const buildingsData = data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏'];
    const existingBuildings = {};
    let totalBuildings = 0;

    if (buildingsData && buildingsData.length > 0) {
      buildingsData.forEach((row, index) => {
        const cell = row[0];
        if (cell) {
          const buildingData = safeParseJSON(cell, '–ü–æ—Å—Ç—Ä–æ–π–∫–∏', index, messages);
          if (buildingData) {
            const buildingsArray = Array.isArray(buildingData) ? buildingData : [buildingData];
            buildingsArray.forEach(building => {
              if (building.province_id && building.building_id) {
                if (!existingBuildings[building.province_id]) {
                  existingBuildings[building.province_id] = {};
                }
                if (!existingBuildings[building.province_id][building.building_id]) {
                  existingBuildings[building.province_id][building.building_id] = 0;
                }
                existingBuildings[building.province_id][building.building_id]++;
                totalBuildings++;
              }
            });
          }
        }
      });
    }
    messages.push(`[GNN] üè¢ –£—á—Ç–µ–Ω–æ ${totalBuildings} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–¥–∞–Ω–∏–π –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.`);

    // 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–¥–∞–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞" –∏–ª–∏ "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"
    const updatedQueue = [];
    let processedCount = 0;
    let promotedCount = 0;
    let removedCount = 0;
    
    constructionQueue.forEach((queueItem, index) => {
      if (queueItem.status === '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞' || queueItem.status === '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ') {
        processedCount++;
        
        // –ù–∞–π—Ç–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∑–¥–∞–Ω–∏—è
        const buildingCriteria = buildings.find(b => b.id === queueItem.building_id);
        
        if (!buildingCriteria) {
          messages.push(`[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] ‚ö†Ô∏è –ó–¥–∞–Ω–∏–µ "${queueItem.building_id}" –≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ "${queueItem.province_id}" (–ø–æ–∑–∏—Ü–∏—è ${queueItem.queue_position || index + 1}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—Ä–∏—Ç–µ—Ä–∏—è—Ö. –ó–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.`);
          removedCount++;
          return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ –∑–¥–∞–Ω–∏–µ
        }

        // –ù–∞–π—Ç–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏—é
        const province = provincesMap[queueItem.province_id];
        
        if (!province) {
          messages.push(`<cellbg:#FFEEEE> [–û—à–∏–±–∫–∞] <color:#CC0000> üó∫Ô∏è –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${queueItem.province_id}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ </color> –¥–ª—è –∑–¥–∞–Ω–∏—è <i>"${buildingCriteria.name}"</i> (${queueItem.building_id}), –ø–æ–∑–∏—Ü–∏—è <u>${queueItem.queue_position || index + 1}</u>. <color:#009900> –ó–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.</color>`);
          removedCount++;
          return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ –∑–¥–∞–Ω–∏–µ
        }

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è –Ω–∞—à–µ–º—É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É
        if (province.state_id !== stateName) {
          messages.push(`[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] üèõÔ∏è –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${province.name}" (${queueItem.province_id}) –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É "${stateName}". –ó–¥–∞–Ω–∏–µ "${buildingCriteria.name}" (–ø–æ–∑–∏—Ü–∏—è ${queueItem.queue_position || index + 1}) —É–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.`);
          removedCount++;
          return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ –∑–¥–∞–Ω–∏–µ
        }

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∑–¥–∞–Ω–∏—è
        const requirementResult = evaluateBuildingRequirements(
          buildingCriteria.requirements,
          province,
          provincesMap,
          existingBuildings,
          stateName,
          messages,
          buildingCriteria.name,
          queueItem.queue_position || index + 1
        );

        if (requirementResult.meets) {
          // –ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
          if (queueItem.status === '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞') {
            queueItem.status = '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ';
            messages.push(`[–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ] üèóÔ∏è –ó–¥–∞–Ω–∏–µ "${buildingCriteria.name}" (${queueItem.building_id}) –≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ "${province.name}" (${queueItem.province_id}), –ø–æ–∑–∏—Ü–∏—è ${queueItem.queue_position || index + 1}, –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Å—Ç–∞—Ç—É—Å "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ". –í–ª–∞–¥–µ–ª–µ—Ü: ${queueItem.owner_id || '–ù–µ —É–∫–∞–∑–∞–Ω'}.`);
            promotedCount++;
          } else {
            messages.push(`[–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ] ‚úÖ –ó–¥–∞–Ω–∏–µ "${buildingCriteria.name}" (${queueItem.building_id}) –≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ "${province.name}" –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ.`);
          }
          updatedQueue.push(queueItem);
        } else {
          // –ö—Ä–∏—Ç–µ—Ä–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
          messages.push(`[–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ] ‚ùå –ó–¥–∞–Ω–∏–µ "${buildingCriteria.name}" (${queueItem.building_id}) –≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ "${province.name}" (${queueItem.province_id}), –ø–æ–∑–∏—Ü–∏—è ${queueItem.queue_position || index + 1}, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–∏—á–∏–Ω–∞: ${requirementResult.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}.`);
          removedCount++;
        }
      } else {
        // –ó–¥–∞–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        updatedQueue.push(queueItem);
      }
    });

    // –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    messages.push(`[–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ] üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ ${processedCount} –∑–¥–∞–Ω–∏–π, –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ ${promotedCount}, —É–¥–∞–ª–µ–Ω–æ ${removedCount}.`);

    // 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
    const updatedQueueData = { construction_queue: updatedQueue };
    
    // –ù–∞–π—Ç–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å –æ—á–µ—Ä–µ–¥—å—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
    const queueIdentifier = '–û—á–µ—Ä–µ–¥—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞';
    
   if (!Array.isArray(data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'])) {
  data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'] = []; // –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤
  messages.push(`[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] ‚ö†Ô∏è "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ" –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤.`);
}

let queueRowIndex = data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'].findIndex(row => row[0] === queueIdentifier);

if (queueRowIndex !== -1) {
  data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'][queueRowIndex][1] = JSON.stringify(updatedQueueData);
  messages.push(`[–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ] üíæ –û—á–µ—Ä–µ–¥—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${updatedQueue.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤.`);
} else {
  data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'].push([queueIdentifier, JSON.stringify(updatedQueueData)]);
  messages.push(`[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] ‚ÑπÔ∏è –°—Ç—Ä–æ–∫–∞ "${queueIdentifier}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ".`);
}

  } catch (error) {
    messages.push(`[–û—à–∏–±–∫–∞] üö® processConstructionQueue: ${error.message}`);
  }

  return messages;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∑–¥–∞–Ω–∏—è
 * @param {Object} requirements - –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏—è
 * @param {Object} province - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
 * @param {Object} provincesMap - –ö–∞—Ä—Ç–∞ –≤—Å–µ—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
 * @param {Object} existingBuildings - –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–¥–∞–Ω–∏—è
 * @param {string} stateName - –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞
 * @param {Array} messages - –ú–∞—Å—Å–∏–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {string} buildingName - –ù–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {number} queuePosition - –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
 * @returns {Object} - {meets: boolean, reason: string}
 */
function evaluateBuildingRequirements(requirements, province, provincesMap, existingBuildings, stateName, messages, buildingName, queuePosition) {
  if (!requirements || typeof requirements !== 'object') {
    return { meets: true, reason: '–ù–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π' };
  }

  const logic = requirements.logic || 'AND';
  const conditions = requirements.conditions || [];

  if (!conditions.length) {
    return { meets: true, reason: '–ü—É—Å—Ç—ã–µ —É—Å–ª–æ–≤–∏—è' };
  }

  const results = conditions.map((condition, index) => 
    evaluateCondition(condition, province, provincesMap, existingBuildings, stateName, messages, buildingName, queuePosition, index)
  );

  let meets = false;
  let reason = '';

  if (logic === 'AND') {
    meets = results.every(result => result.meets);
    if (!meets) {
      const failedReasons = results.filter(r => !r.meets).map(r => r.reason);
      reason = `–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ª–æ–≤–∏—è (AND): ${failedReasons.join(', ')}`;
    }
  } else if (logic === 'OR') {
    meets = results.some(result => result.meets);
    if (!meets) {
      reason = `–ù–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (OR): ${results.map(r => r.reason).join(', ')}`;
    }
  } else if (logic === 'NOT') {
    meets = !results.some(result => result.meets);
    reason = meets ? '–£—Å–ª–æ–≤–∏–µ NOT –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' : `–£—Å–ª–æ–≤–∏–µ NOT –Ω–∞—Ä—É—à–µ–Ω–æ: ${results.filter(r => r.meets).map(r => r.reason).join(', ')}`;
  } else if (logic === 'XOR') {
    const trueCount = results.filter(r => r.meets).length;
    meets = trueCount === 1;
    reason = meets ? '–£—Å–ª–æ–≤–∏–µ XOR –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' : `XOR —Ç—Ä–µ–±—É–µ—Ç —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ –∏—Å—Ç–∏–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ, –ø–æ–ª—É—á–µ–Ω–æ ${trueCount}`;
  } else if (logic === 'NAND') {
    meets = !results.every(result => result.meets);
    reason = meets ? '–£—Å–ª–æ–≤–∏–µ NAND –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' : 'NAND –Ω–∞—Ä—É—à–µ–Ω–æ: –≤—Å–µ —É—Å–ª–æ–≤–∏—è –∏—Å—Ç–∏–Ω–Ω—ã';
  } else if (logic === 'NOR') {
    meets = !results.some(result => result.meets);
    reason = meets ? '–£—Å–ª–æ–≤–∏–µ NOR –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' : 'NOR –Ω–∞—Ä—É—à–µ–Ω–æ: –µ—Å—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è';
  } else {
    meets = false;
    reason = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: ${logic}`;
  }

  return { meets, reason };
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è
 * @param {Object} condition - –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {Object} province - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
 * @param {Object} provincesMap - –ö–∞—Ä—Ç–∞ –≤—Å–µ—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
 * @param {Object} existingBuildings - –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–¥–∞–Ω–∏—è
 * @param {string} stateName - –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞
 * @param {Array} messages - –ú–∞—Å—Å–∏–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {string} buildingName - –ù–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
 * @param {number} queuePosition - –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
 * @param {number} conditionIndex - –ò–Ω–¥–µ–∫—Å —É—Å–ª–æ–≤–∏—è
 * @returns {Object} - {meets: boolean, reason: string}
 */
function evaluateCondition(condition, province, provincesMap, existingBuildings, stateName, messages, buildingName, queuePosition, conditionIndex) {
  if (!condition.target) {
    return { meets: false, reason: `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç target` };
  }

  // –†–∞–∑–±–æ—Ä target (–Ω–∞–ø—Ä–∏–º–µ—Ä, "province.agriculturalLand", "province.climate")
  const targetParts = condition.target.split('.');
  
  try {
    if (targetParts[0] === 'province') {
      return evaluateProvinceCondition(condition, province, existingBuildings, conditionIndex);
    } else if (targetParts[0] === 'state') {
      return evaluateStateCondition(condition, provincesMap, existingBuildings, stateName, conditionIndex);
    } else if (targetParts[0] === 'planet') {
      return evaluatePlanetCondition(condition, province, provincesMap, conditionIndex);
    } else if (targetParts[0] === 'world') {
      return evaluateWorldCondition(condition, provincesMap, existingBuildings, conditionIndex);
    } else {
      return { meets: false, reason: `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π target "${targetParts[0]}"` };
    }
  } catch (error) {
    return { meets: false, reason: `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –æ—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ - ${error.message}` };
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
 * @param {Object} condition - –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {Object} province - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
 * @param {Object} existingBuildings - –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–¥–∞–Ω–∏—è
 * @param {number} conditionIndex - –ò–Ω–¥–µ–∫—Å —É—Å–ª–æ–≤–∏—è
 * @returns {Object} - {meets: boolean, reason: string}
 */
function evaluateProvinceCondition(condition, province, existingBuildings, conditionIndex) {
  const targetParts = condition.target.split('.');
  const property = targetParts[1];

  if (property === 'buildings') {
    return evaluateBuildingsCondition(condition, province.id, existingBuildings, conditionIndex);
  } else if (property === 'resources') {
    return evaluateResourcesCondition(condition, province.resources || {}, conditionIndex);
  } else {
    // –ü—Ä–æ—Å—Ç–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
    const value = province[property];
    if (value === undefined) {
      return { meets: false, reason: `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: —Å–≤–æ–π—Å—Ç–≤–æ "${property}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏` };
    }
    return evaluateSimpleCondition(condition, value, conditionIndex, `province.${property}`);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π –∑–¥–∞–Ω–∏–π –≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
 * @param {Object} condition - –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {string} provinceId - ID –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
 * @param {Object} existingBuildings - –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–¥–∞–Ω–∏—è
 * @param {number} conditionIndex - –ò–Ω–¥–µ–∫—Å —É—Å–ª–æ–≤–∏—è
 * @returns {Object} - {meets: boolean, reason: string}
 */
function evaluateBuildingsCondition(condition, provinceId, existingBuildings, conditionIndex) {
  const logic = condition.logic || 'AND';
  const conditions = condition.conditions || [];

  if (!conditions.length) {
    return { meets: true, reason: `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –Ω–µ—Ç –ø–æ–¥—É—Å–ª–æ–≤–∏–π –¥–ª—è –∑–¥–∞–Ω–∏–π` };
  }

  const results = conditions.map((subCondition, subIndex) => {
    const buildingId = subCondition.buildingId;
    const count = existingBuildings[provinceId]?.[buildingId] || 0;
    const result = evaluateSimpleCondition(subCondition, count, subIndex, `building.${buildingId}`);
    return {
      ...result,
      buildingId,
      count,
      expectedValue: subCondition.value,
      operator: subCondition.operator
    };
  });

  let meets = false;
  let reason = '';

  if (logic === 'AND') {
    meets = results.every(result => result.meets);
    if (!meets) {
      const failedBuildings = results.filter(r => !r.meets);
      reason = `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –∑–¥–∞–Ω–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç (AND): ${failedBuildings.map(r => 
        `${r.buildingId} (${r.count} ${r.operator} ${r.expectedValue})`
      ).join(', ')}`;
    } else {
      reason = `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –≤—Å–µ –∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º`;
    }
  } else if (logic === 'OR') {
    meets = results.some(result => result.meets);
    if (!meets) {
      reason = `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –Ω–∏ –æ–¥–Ω–æ –∑–¥–∞–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç (OR): ${results.map(r => 
        `${r.buildingId} (${r.count} ${r.operator} ${r.expectedValue})`
      ).join(', ')}`;
    } else {
      const successBuildings = results.filter(r => r.meets);
      reason = `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç (OR): ${successBuildings.map(r => r.buildingId).join(', ')}`;
    }
  }

  return { meets, reason };
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤
 * @param {Object} condition - –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {Object} resources - –†–µ—Å—É—Ä—Å—ã –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
 * @param {number} conditionIndex - –ò–Ω–¥–µ–∫—Å —É—Å–ª–æ–≤–∏—è
 * @returns {Object} - {meets: boolean, reason: string}
 */
function evaluateResourcesCondition(condition, resources, conditionIndex) {
  const logic = condition.logic || 'AND';
  const conditions = condition.conditions || [];

  if (!conditions.length) {
    return { meets: true, reason: `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –Ω–µ—Ç –ø–æ–¥—É—Å–ª–æ–≤–∏–π –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤` };
  }

  const results = conditions.map((subCondition, subIndex) => {
    const resourceId = subCondition.resourceId;
    const amount = resources[resourceId] || 0;
    const result = evaluateSimpleCondition(subCondition, amount, subIndex, `resource.${resourceId}`);
    return {
      ...result,
      resourceId,
      amount,
      expectedValue: subCondition.value,
      operator: subCondition.operator
    };
  });

  let meets = false;
  let reason = '';

  if (logic === 'AND') {
    meets = results.every(result => result.meets);
    if (!meets) {
      const failedResources = results.filter(r => !r.meets);
      reason = `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: —Ä–µ—Å—É—Ä—Å—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã (AND): ${failedResources.map(r => 
        `${r.resourceId} (${r.amount} ${r.operator} ${r.expectedValue})`
      ).join(', ')}`;
    } else {
      reason = `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º`;
    }
  } else if (logic === 'OR') {
    meets = results.some(result => result.meets);
    if (!meets) {
      reason = `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –Ω–∏ –æ–¥–∏–Ω —Ä–µ—Å—É—Ä—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç (OR): ${results.map(r => 
        `${r.resourceId} (${r.amount} ${r.operator} ${r.expectedValue})`
      ).join(', ')}`;
    } else {
      const successResources = results.filter(r => r.meets);
      reason = `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: —Ä–µ—Å—É—Ä—Å—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç (OR): ${successResources.map(r => r.resourceId).join(', ')}`;
    }
  }

  return { meets, reason };
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞
 * @param {Object} condition - –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {Object} provincesMap - –ö–∞—Ä—Ç–∞ –≤—Å–µ—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
 * @param {Object} existingBuildings - –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–¥–∞–Ω–∏—è
 * @param {string} stateName - –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞
 * @param {number} conditionIndex - –ò–Ω–¥–µ–∫—Å —É—Å–ª–æ–≤–∏—è
 * @returns {Object} - {meets: boolean, reason: string}
 */
function evaluateStateCondition(condition, provincesMap, existingBuildings, stateName, conditionIndex) {
  const targetParts = condition.target.split('.');
  const property = targetParts[1];

  if (property === 'buildings') {
    // –ü–æ–¥—Å—á–µ—Ç –∑–¥–∞–Ω–∏–π –≤–æ –≤—Å–µ—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏—è—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞
    const stateBuildingCounts = {};
    let stateProvinceCount = 0;
    
    Object.values(provincesMap).forEach(province => {
      if (province.state_id === stateName) {
        stateProvinceCount++;
        const provinceBuildings = existingBuildings[province.id] || {};
        Object.entries(provinceBuildings).forEach(([buildingId, count]) => {
          stateBuildingCounts[buildingId] = (stateBuildingCounts[buildingId] || 0) + count;
        });
      }
    });

    const conditions = condition.conditions || [];
    const results = conditions.map((subCondition, subIndex) => {
      const buildingId = subCondition.buildingId;
      const count = stateBuildingCounts[buildingId] || 0;
      const result = evaluateSimpleCondition(subCondition, count, subIndex, `state.building.${buildingId}`);
      return {
        ...result,
        buildingId,
        count,
        expectedValue: subCondition.value,
        operator: subCondition.operator
      };
    });

    const meets = results.every(result => result.meets);
    let reason = '';
    
    if (!meets) {
      const failedBuildings = results.filter(r => !r.meets);
      reason = `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –∑–¥–∞–Ω–∏—è –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç: ${failedBuildings.map(r => 
        `${r.buildingId} (${r.count} ${r.operator} ${r.expectedValue})`
      ).join(', ')} (–ø—Ä–æ–≤–∏–Ω—Ü–∏–π –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ: ${stateProvinceCount})`;
    } else {
      reason = `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –≤—Å–µ –∑–¥–∞–Ω–∏—è –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º`;
    }

    return { meets, reason };
  }

  return { meets: false, reason: `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ state.${property}` };
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π –ø–ª–∞–Ω–µ—Ç—ã
 * @param {Object} condition - –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {Object} province - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
 * @param {Object} provincesMap - –ö–∞—Ä—Ç–∞ –≤—Å–µ—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
 * @param {number} conditionIndex - –ò–Ω–¥–µ–∫—Å —É—Å–ª–æ–≤–∏—è
 * @returns {Object} - {meets: boolean, reason: string}
 */
function evaluatePlanetCondition(condition, province, provincesMap, conditionIndex) {
  const targetParts = condition.target.split('.');
  const property = targetParts[1];

  if (property === 'name') {
    const result = evaluateSimpleCondition(condition, province.planet, conditionIndex, 'planet.name');
    return {
      ...result,
      reason: result.meets ? 
        `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –ø–ª–∞–Ω–µ—Ç–∞ "${province.planet}" —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º` :
        `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –ø–ª–∞–Ω–µ—Ç–∞ "${province.planet}" –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º`
    };
  }

  return { meets: false, reason: `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ planet.${property}` };
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π –º–∏—Ä–∞ (–≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç)
 * @param {Object} condition - –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {Object} provincesMap - –ö–∞—Ä—Ç–∞ –≤—Å–µ—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
 * @param {Object} existingBuildings - –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–¥–∞–Ω–∏—è
 * @param {number} conditionIndex - –ò–Ω–¥–µ–∫—Å —É—Å–ª–æ–≤–∏—è
 * @returns {Object} - {meets: boolean, reason: string}
 */
function evaluateWorldCondition(condition, provincesMap, existingBuildings, conditionIndex) {
  const targetParts = condition.target.split('.');
  const property = targetParts[1];

  if (property === 'buildings') {
    // –ü–æ–¥—Å—á–µ—Ç –∑–¥–∞–Ω–∏–π –≤–æ –≤—Å–µ–º –º–∏—Ä–µ
    const worldBuildingCounts = {};
    
    Object.values(provincesMap).forEach(province => {
      const provinceBuildings = existingBuildings[province.id] || {};
      Object.entries(provinceBuildings).forEach(([buildingId, count]) => {
        worldBuildingCounts[buildingId] = (worldBuildingCounts[buildingId] || 0) + count;
      });
    });

    const conditions = condition.conditions || [];
    const results = conditions.map((subCondition, subIndex) => {
      const buildingId = subCondition.buildingId;
      const count = worldBuildingCounts[buildingId] || 0;
      return {
        ...evaluateSimpleCondition(subCondition, count, subIndex, `world.building.${buildingId}`),
        buildingId,
        count,
        expectedValue: subCondition.value,
        operator: subCondition.operator
      };
    });

    const meets = results.every(result => result.meets);
    let reason = '';
    
    if (!meets) {
      const failedBuildings = results.filter(r => !r.meets);
      reason = `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –∑–¥–∞–Ω–∏—è –≤ –º–∏—Ä–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç: ${failedBuildings.map(r => 
        `${r.buildingId} (${r.count} ${r.operator} ${r.expectedValue})`
      ).join(', ')}`;
    } else {
      reason = `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –≤—Å–µ –∑–¥–∞–Ω–∏—è –≤ –º–∏—Ä–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º`;
    }

    return { meets, reason };
  }

  return { meets: false, reason: `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ world.${property}` };
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ—Å—Ç—ã—Ö —É—Å–ª–æ–≤–∏–π —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
 * @param {Object} condition - –£—Å–ª–æ–≤–∏–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º
 * @param {*} actualValue - –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 * @param {number} conditionIndex - –ò–Ω–¥–µ–∫—Å —É—Å–ª–æ–≤–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {string} target - –¶–µ–ª–µ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {Object} - {meets: boolean, reason: string}
 */
function evaluateSimpleCondition(condition, actualValue, conditionIndex, target) {
  const operator = condition.operator;
  const expectedValue = condition.value;
  let meets = false;

  if (actualValue === undefined || actualValue === null) {
    return { 
      meets: false, 
      reason: `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –∑–Ω–∞—á–µ–Ω–∏–µ "${target}" –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ` 
    };
  }

  switch (operator) {
    case '>=':
      meets = actualValue >= expectedValue;
      break;
    case '<=':
      meets = actualValue <= expectedValue;
      break;
    case '>':
      meets = actualValue > expectedValue;
      break;
    case '<':
      meets = actualValue < expectedValue;
      break;
    case '==':
    case 'equals':
      meets = actualValue === expectedValue;
      break;
    case '!=':
    case 'not_equals':
      meets = actualValue !== expectedValue;
      break;
    case 'in':
    case 'contains':
      meets = Array.isArray(expectedValue) && expectedValue.includes(actualValue);
      break;
    case 'not_in':
    case 'not_contains':
      meets = Array.isArray(expectedValue) && !expectedValue.includes(actualValue);
      break;
    case 'starts_with':
      meets = typeof actualValue === 'string' && typeof expectedValue === 'string' && 
              actualValue.startsWith(expectedValue);
      break;
    case 'ends_with':
      meets = typeof actualValue === 'string' && typeof expectedValue === 'string' && 
              actualValue.endsWith(expectedValue);
      break;
    case 'regex':
    case 'matches':
      try {
        const regex = new RegExp(expectedValue);
        meets = regex.test(String(actualValue));
      } catch (e) {
        return { 
          meets: false, 
          reason: `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –æ—à–∏–±–∫–∞ –≤ regex "${expectedValue}": ${e.message}` 
        };
      }
      break;
    case 'between':
      if (Array.isArray(expectedValue) && expectedValue.length === 2) {
        meets = actualValue >= expectedValue[0] && actualValue <= expectedValue[1];
      } else {
        return { 
          meets: false, 
          reason: `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –æ–ø–µ—Ä–∞—Ç–æ—Ä "between" —Ç—Ä–µ–±—É–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑ 2 —ç–ª–µ–º–µ–Ω—Ç–æ–≤` 
        };
      }
      break;
    case 'divisible_by':
      meets = typeof actualValue === 'number' && typeof expectedValue === 'number' && 
              expectedValue !== 0 && actualValue % expectedValue === 0;
      break;
    case 'is_empty':
      meets = expectedValue ? 
        (actualValue === '' || actualValue === null || actualValue === undefined || 
         (Array.isArray(actualValue) && actualValue.length === 0) ||
         (typeof actualValue === 'object' && Object.keys(actualValue).length === 0)) :
        !(actualValue === '' || actualValue === null || actualValue === undefined || 
         (Array.isArray(actualValue) && actualValue.length === 0) ||
         (typeof actualValue === 'object' && Object.keys(actualValue).length === 0));
      break;
    case 'length':
      const length = Array.isArray(actualValue) ? actualValue.length : 
                    typeof actualValue === 'string' ? actualValue.length : 0;
      meets = evaluateSimpleCondition(
        { operator: expectedValue.operator, value: expectedValue.value }, 
        length, 
        conditionIndex, 
        `${target}.length`
      ).meets;
      break;
    default:
      return { 
        meets: false, 
        reason: `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä "${operator}"` 
      };
  }

  const reason = meets ? 
    `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: ${target} (${actualValue}) ${operator} ${Array.isArray(expectedValue) ? `[${expectedValue.join(', ')}]` : expectedValue} ‚úÖ` :
    `–£—Å–ª–æ–≤–∏–µ ${conditionIndex + 1}: ${target} (${actualValue}) ${operator} ${Array.isArray(expectedValue) ? `[${expectedValue.join(', ')}]` : expectedValue} ‚ùå`;

  return { meets, reason };
}